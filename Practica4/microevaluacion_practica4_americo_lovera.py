# -*- coding: utf-8 -*-
"""Microevaluacion- Practica4-Americo Lovera.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWJfY7I0uLSJXGrirpt934O_1GV-LOp9

**Práctica de NLP con Python y Google Colab para n-gramas
Objetivo Analizar el texto de un libro y generar n-gramas para entender la estructura del lenguaje.**

**Requisitos**

- Cuenta de Google Colab
- Conocimientos básicos de Python y NLP
- Librerías necesarias: nltk, pandas, matplotlib
"""

import nltk
import requests
from nltk.util import ngrams
import pandas as pd
import matplotlib.pyplot as plt

"""**Cargar el texto del libro**"""

# URL del libro en Project Gutenberg
url = "https://www.gutenberg.org/files/11/11-0.txt"

# Descargar el archivo de texto desde la URL
response = requests.get(url)

# Verificar que la solicitud fue exitosa
if response.status_code == 200:
    # Obtener el texto completo
    text = response.text

    # Dividir el texto en líneas
    lines = text.splitlines()

    # Crear un DataFrame con cada línea como una fila
    texto = pd.DataFrame(lines, columns=["texto"])

"""**Tokenizar el texto**"""

# Tokenización manual simple
tokens= texto["texto"].iloc[0].split()

# Mostrar los primeros 10 tokens
print(tokens[:10])

"""**Generar n-gramas**"""

ngramas = ngrams(tokens, 2) # 2-gramas

"""**Mostrar los 10 primeros n-gramas**"""

print(list(ngramas)[:10])

"""**Generar n-gramas de longitud 3**"""

ngramas_3 = ngrams(tokens, 3) #Longitud 3

"""**Mostrar los 10 primeros n-gramas de longitud 3**"""

print(list(ngramas_3)[:10])

"""**Generar n-gramas de longitud 4**"""

ngramas_4 = ngrams(tokens, 4) #Longitud 4

"""**Mostrar los 10 primeros n-gramas de longitud 4**"""

print(list(ngramas_4)[:10])

"""**Generar n-gramas de longitud 5**"""

ngramas_5 = ngrams(tokens, 5) #Longitud 5

"""**Mostrar los 10 primeros n-gramas de longitud 5**"""

print(list(ngramas_5)[:10])

"""**Gráfica de frecuencia de n-gramas**


"""

# Gráfica de frecuencia de n-gramas

freq_ngramas = nltk.FreqDist(ngramas)
plt.bar(freq_ngramas.keys(), freq_ngramas.values())
plt.xlabel("N-gramas")
plt.ylabel("Frecuencia")
plt.title("Frecuencia de n-gramas")

plt.tight_layout()  # Ajustar el gráfico
plt.show()

"""**Gráfica de distribución de frecuencias de n-gramas**"""

# Gráfica de distribución de frecuencias de n-gramas
plt.hist(freq_ngramas.values(), bins=10)
plt.xlabel("Frecuencia")
plt.ylabel("Cantidad")
plt.title("Distribución de frecuencias de n-gramas")
plt.show()

"""**Gráfica de n-gramas más frecuentes**"""

# Gráfica de n-gramas más frecuentes
ngramas_más_frecuentes = freq_ngramas.most_common(10)
plt.bar([ngrama[0] for ngrama in ngramas_más_frecuentes], [ngrama[1] for ngrama in ngramas_más_frecuentes])
plt.xlabel("N-gramas más frecuentes")
plt.ylabel("Frecuencia")
plt.title("N-gramas más frecuentes")
plt.show()